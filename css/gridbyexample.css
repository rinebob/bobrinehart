/* From:  https://gridbyexample.com/examples/ */
/* Example 1 */
body {
	margin: 40px;
  }
/*   
  .wrapper1 {
	display: grid;
	grid-template-columns: 100px 100px 100px;
	grid-gap: 10px;
	background-color: #fff;
	color: #444;
  }
  
  .box1 {
	background-color: #444;
	color: #fff;
	border-radius: 5px;
	padding: 20px;
	font-size: 150%;
  } */
/* Example 2 */
  /* .a {
	grid-column-start: 2;
	grid-column-end: 3;
	grid-row-start: 1;
	grid-row-end: 2;
}
.b {
	grid-column-start: 2;
	grid-column-end: 3;
	grid-row-start: 2;
	grid-row-end: 3;
}
.c {
	grid-column-start: 3;
	grid-column-end: 4;
	grid-row-start: 2;
	grid-row-end: 3;
}
.d {
	grid-column-start: 1;
	grid-column-end: 2;
	grid-row-start: 1;
	grid-row-end: 2;
}
.e {
	grid-column-start: 1;
	grid-column-end: 2;
	grid-row-start: 2;
	grid-row-end: 3;
}
.f {
	grid-column-start: 3;
	grid-column-end: 4;
	grid-row-start: 1;
	grid-row-end: 2;
} */

/* Example 3 */
/* Line-based placement shorthand - grid-row and grid-column
We can achieve the same result as in example 2 using a shorthand syntax declaring the start and end values at once. Values are separated with a / and again it would be valid to omit the / and the end value as we are spanning only one track. */

/* .a {
    grid-column: 1 / 1;
    grid-row: 1 / 2;
  }
  .b {
    grid-column: 2 / 3;
    grid-row: 2 / 3;
  }
  .c {
    grid-column: 3 / 4;
    grid-row: 2 / 3;
  }
  .d {
    grid-column: 2 / 2;
    grid-row: 1 / 2;
  }
  .e {
    grid-column: 1 / 2;
    grid-row: 2 / 3;
  }
  .f {
    grid-column: 3 / 4;
    grid-row: 1 / 2;
  }  */

/* Example 4 */

/* Line-based placement shorthand - grid-area
We can achieve the same result as in example 2 and 3 declaring all four values with the grid-area property. Again values are separated with a /. The order of the values is row-start/column-start/row-end/column-end. */

/* .a {
	grid-area: 1 / 1 / 2 / 2;
}
.b {
	grid-area: 1 / 2 / 2 / 2;
}
.c {
	grid-area: 1 / 3 / 2 / 4;
}
.d {
	grid-area: 2 / 1 / 3 / 2;
}
.e {
	grid-area: 2 / 2 / 3 / 3;
}
.f {
	grid-area: 2 / 3 / 3 / 4;
} */

/* Example 5*/

/* Line-based placement spanning tracks
To create Grid Areas that are larger than a single grid track we specify an end line that is more than one track away.

Here I am using the grid-column and grid-row shorthand and have omitted the end value for any items that span one row or column track. */

/* .a {
	grid-column: 1 / 3;
	grid-row: 1;
}
.b {
	grid-column: 3 ;
	grid-row: 1 / 3;
}
.c {
	grid-column: 1 ;
	grid-row: 2 ;
}
.d {
	grid-column: 2;
	grid-row: 2;
} */

/* Example 6*/

/* Nested Grid
A simple example of nesting one grid inside another. Any Grid Area can become a grid itself, by setting display:grid and then defining the rows and columns. */

/* body {
	margin: 40px;
} */
/* 
.wrapper2 {
	display: grid;
	grid-gap: 10px;
	grid-template-columns: repeat(4, [col] 150px ) ;
	grid-template-rows: repeat(2, [row] auto  );
	background-color: #fff;
	color: #444;
}

.box2 {
	background-color: #444;
	color: #fff;
	border-radius: 5px;
	padding: 20px;
	font-size: 150%;

}

.box2 .box2 {
	background-color: #ccc;
	color: #444;
}

.a2 {
	grid-column: col / span 2;
	grid-row: row;
}

.b2 {
	grid-column: col 3 / span 2;
	grid-row: row;
}

.c2 {
	grid-column: col / span 2;
	grid-row: row 2;
}

.d2 {
	grid-column: col 3 / span 2;
	grid-row: row 2;
	display: grid;
	grid-gap: 10px;
	grid-template-columns: 1fr 1fr;
}

.e2 {
	grid-column: 1 / 3;
	grid-row: 1;
}

.f2 {
	grid-column: 1;
	grid-row: 2;
}

.g2 {
	grid-column: 2;
	grid-row: 2;
} */

/* Example 29*/
/* minmax() and spanning columns and rows
In this example I am creating a grid that contains as many 200 pixel column tracks as will fit into the container with the remaining space shared equally between the columns. In the minmax() function the first value is the minimum size I want my tracks to be, the second is the maximum. By using 1fr as the maximum value the space is equally distributed.

I am then spanning columns and rows. As the items are auto-placed on our flexible grid they will move around the grid but maintain their spanned size. */

.wrapper3 {
	display: grid;
	grid-gap: 10px;
	grid-template-columns: repeat(auto-fill, minmax(200px, 1fr) ) ;
	/* background-color: #fff; */
	background-color: #C7E9B4;
	color: #444;
}

.box3 {
	background-color: #444;
	color: #fff;
	border-radius: 5px;
	padding: 20px;
	font-size: 150%;

}

.a3 {
grid-column: auto / span 2;
}

.k3 {
grid-column: auto / span 3;
}

.g3 {
grid-column: auto / span 2;
grid-row: auto / span 2;
}

/* Example 8*/
/* Example 9*/
/* Example 10*/
/* Example 11*/
/* Example 12*/
/* Example 13*/